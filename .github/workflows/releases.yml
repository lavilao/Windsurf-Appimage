name: Build Windsurf Editor AppImage

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-appimage:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl file imagemagick

      - name: Fetch PKGBUILD from AUR
        run: |
          curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=windsurf

      - name: Parse PKGBUILD for source URL and version
        id: parse-pkgbuild
        run: |
          source ./PKGBUILD
          echo "Package version: ${pkgver}"
          echo "Source URL: ${source[0]}"
          echo "PKGVER=${pkgver}" >> $GITHUB_ENV
          echo "SOURCE_URL=${source[0]}" >> $GITHUB_ENV

      - name: Download .deb file
        run: |
          echo "Downloading from: ${SOURCE_URL}"
          wget "${SOURCE_URL}" -O windsurf.deb

      - name: Extract .deb file
        run: |
          dpkg-deb -x windsurf.deb windsurf-extracted
          ls -la windsurf-extracted/

      - name: Create AppDir structure
        run: |
          mkdir -p windsurf.AppDir/usr

          # Copy all usr contents
          if [ -d "windsurf-extracted/usr" ]; then
            cp -r windsurf-extracted/usr/* windsurf.AppDir/usr/
          fi

          # Copy desktop file from our repo (customized version)
          cp app.desktop windsurf.AppDir/windsurf.desktop

          # Debug: List available icons
          echo "Available icons:"
          find windsurf-extracted -name "*.png" -o -name "*.svg" | head -10

          # Find and copy icon - try multiple strategies
          ICON_FOUND=false

          # Strategy 1: Look for windsurf-specific icons
          for size in 512 256 128 64 48; do
            ICON_PATH=$(find windsurf-extracted -path "*${size}x${size}*" -name "*windsurf*" -o -path "*${size}x${size}*" -name "*code*" | head -1)
            if [ -n "$ICON_PATH" ]; then
              echo "Found icon at: $ICON_PATH"
              cp "$ICON_PATH" windsurf.AppDir/windsurf.png
              ICON_FOUND=true
              break
            fi
          done

          # Strategy 2: Look for any large icon if windsurf-specific not found
          if [ "$ICON_FOUND" = false ]; then
            for size in 512 256 128; do
              ICON_PATH=$(find windsurf-extracted -path "*${size}x${size}*" -name "*.png" | head -1)
              if [ -n "$ICON_PATH" ]; then
                echo "Found fallback icon at: $ICON_PATH"
                cp "$ICON_PATH" windsurf.AppDir/windsurf.png
                ICON_FOUND=true
                break
              fi
            done
          fi

          # Strategy 3: Use any PNG icon as last resort
          if [ "$ICON_FOUND" = false ]; then
            ICON_PATH=$(find windsurf-extracted -name "*.png" | head -1)
            if [ -n "$ICON_PATH" ]; then
              echo "Found any PNG icon at: $ICON_PATH"
              cp "$ICON_PATH" windsurf.AppDir/windsurf.png
              ICON_FOUND=true
            fi
          fi

          # Strategy 4: Create a default icon if none found
          if [ "$ICON_FOUND" = false ]; then
            echo "No icon found, creating default 256x256 PNG"
            # Create a simple default icon using ImageMagick if available, or download one
            if command -v convert >/dev/null 2>&1; then
              convert -size 256x256 xc:lightblue -gravity center -pointsize 32 -fill black -annotate +0+0 "W" windsurf.AppDir/windsurf.png
            else
              # Download a generic code editor icon
              wget -O windsurf.AppDir/windsurf.png "https://raw.githubusercontent.com/microsoft/vscode-icons/main/icons/file_type_vscode.png" || \
              echo "Could not create or download icon"
            fi
          fi

          # Verify icon exists
          if [ -f "windsurf.AppDir/windsurf.png" ]; then
            echo "Icon successfully placed: windsurf.AppDir/windsurf.png"
            ls -la windsurf.AppDir/windsurf.png
          else
            echo "WARNING: No icon file created"
          fi

          # Create AppRun script
          cat > windsurf.AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/windsurf" "$@"
          EOF
          chmod +x windsurf.AppDir/AppRun

          # List AppDir contents for debugging
          echo "AppDir structure:"
          find windsurf.AppDir -type f | head -20

      - name: Download appimagetool
        run: |
          wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppImage
        run: |
          export ARCH=x86_64
          ./appimagetool-x86_64.AppImage windsurf.AppDir Windsurf-${{ env.PKGVER }}-x86_64.AppImage

      - name: Test AppImage
        run: |
          chmod +x Windsurf-${{ env.PKGVER }}-x86_64.AppImage
          ./Windsurf-${{ env.PKGVER }}-x86_64.AppImage --version || echo "Version check failed, but AppImage was created"

      - name: Generate checksums
        run: |
          sha256sum Windsurf-${{ env.PKGVER }}-x86_64.AppImage > Windsurf-${{ env.PKGVER }}-x86_64.AppImage.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windsurf-appimage
          path: |
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage.sha256

      - name: Upload to Release (if release event)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create latest release (if push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "latest-${{ env.PKGVER }}"
          name: "Windsurf AppImage v${{ env.PKGVER }}"
          body: |
            Automated build of Windsurf AppImage v${{ env.PKGVER }}

            **Changes:**
            - Built from Windsurf v${{ env.PKGVER }}
            - Generated on $(date)

            **Installation:**
            1. Download the AppImage
            2. Make it executable: `chmod +x Windsurf-${{ env.PKGVER }}-x86_64.AppImage`
            3. Run it: `./Windsurf-${{ env.PKGVER }}-x86_64.AppImage`
          files: |
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage
            Windsurf-${{ env.PKGVER }}-x86_64.AppImage.sha256
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
